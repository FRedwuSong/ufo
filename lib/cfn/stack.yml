# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
Parameters:
  # ECSSecurityGroups:
  #   Description: Existig ecs security group ids
  #   Type: List<AWS::EC2::SecurityGroup::Id>
  ElbSecurityGroups:
    Description: Existing elb security group ids
    Type: List<AWS::EC2::SecurityGroup::Id>
    Default: sg-32a30579
  Subnets:
    Description: Existing subnet ids
    Type: List<AWS::EC2::Subnet::Id>
    Default: subnet-29e75925,subnet-3fb1875a
  Vpc:
    Description: Existing vpc id
    Type: AWS::EC2::VPC::Id
    Default: vpc-d79753ae
  ElbTargetGroup:
    Description: Existing target group
    Type: String
    Default: '' # when blank the automatically created TargetGroup is used
    # TESTING:
    # Default: 'arn:aws:elasticloadbalancing:us-east-1:160619113767:targetgroup/test-target-group/4ac7e3d667fb713f'
  CreateElb:
    Description: Create elb
    Type: String
    Default: true
  EcsDesiredCount:
    Description: EcsDesiredCount
    Type: String
    Default: 1
  EcsTaskDefinition:
    Description: EcsTaskDefinition
    Type: String
    Default: arn:aws:ecs:us-east-1:160619113767:task-definition/hi-web:191
Conditions:
  CreateElbIsTrue: !Equals [ !Ref CreateElb, true ]
  ElbTargetGroupIsBlank: !Equals [ !Ref ElbTargetGroup, '' ]
  CreateTargetGroupIsTrue: !And
  - !Condition CreateElbIsTrue
  - !Condition ElbTargetGroupIsBlank
Resources:
  Elb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: CreateElbIsTrue
    Properties:
      Scheme: internet-facing # or internal
      Subnets: !Ref Subnets
      # LoadBalancerAttributes:
      # - Key: deletion_protection.enabled
      #   Value: "false"
      # - Key: access_logs.s3.enabled
      #   Value: "false"
      # - Key: idle_timeout.timeout_seconds
      #   Value: "1"
      # - Key: access_logs.s3.prefix
      #   Value: "hi-web"
      # - Key: access_logs.s3.bucket
      #   Value: "my-bucket"
      SecurityGroups: [!Ref ElbSecurityGroup]
      Tags:
      - Key: Name
        Value: <%= @service %>-<%= (rand.round(2) * 100).to_i.to_s %>
      - Key: ufo
        Value: <%= @service %>
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: CreateTargetGroupIsTrue
    Properties:
      HealthCheckIntervalSeconds: 60
      UnhealthyThresholdCount: 10
      HealthCheckPath: /
      # Name: "my-elb"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Vpc
      # TODO: required for fargate or awsvpc network mode
      TargetType: ip
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: CreateElbIsTrue
    Properties:
      # Certificates:
      #   - Certificate
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          !If [ElbTargetGroupIsBlank, !Ref TargetGroup, !Ref ElbTargetGroup]
      LoadBalancerArn: !Ref Elb
      Port: 80
      Protocol: HTTP
  ElbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: <%= @service %>-elb
      - Key: ufo
        Value: <%= @service %>

  # Allow all traffic from ELB SG to ECS SG
  InboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !GetAtt [ElbSecurityGroup, GroupId]
      GroupId: !GetAtt [EcsSecurityGroup, GroupId]

  EcsService:
    Type: "AWS::ECS::Service"
    # TODO: see what happens if create a cluster that is already existing
    Properties:
      Cluster: "development"
      DesiredCount: !Ref EcsDesiredCount
      TaskDefinition: !Ref EcsTaskDefinition
      # ServiceName: <%= @service %>
      # TODO: required for fargate
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref Subnets # required
          # SecurityGroups: [""]
          SecurityGroups: [!Ref EcsSecurityGroup]
          AssignPublicIp: ENABLED # accepts ENABLED, DISABLED
      LoadBalancers:
      - ContainerName: <%= @container_info[:name] %>
        ContainerPort: <%= @container_info[:port] %>
        TargetGroupArn: !Ref TargetGroup
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref Vpc
      # instance needs access to internet to pull down image or else get CannotPullContainerError
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: <%= @service %>
      - Key: ufo
        Value: <%= @service %>

Outputs:
 Dns:
    Description: Elb Dns
    Condition: CreateElbIsTrue
    Value: !GetAtt Elb.DNSName
