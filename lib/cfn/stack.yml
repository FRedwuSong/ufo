Description: "Ufo ECS stack <%= @service %>"
Parameters:
  # required
  Subnets:
    Description: Existing subnet ids
    Type: List<AWS::EC2::Subnet::Id>
  Vpc:
    Description: Existing vpc id
    Type: AWS::EC2::VPC::Id

  EcsSecurityGroups:
    Description: Existing ecs security group ids
    Type: String
    Default: ''
  ElbSecurityGroups:
    Description: Existing elb security group ids. List with commas.
    Type: String
    Default: ''

  ElbTargetGroup:
    Description: Existing target group
    Type: String
    Default: '' # when blank the automatically created TargetGroup is used
  CreateElb:
    Description: Create elb
    Type: String
    Default: true
  EcsDesiredCount:
    Description: EcsDesiredCount
    Type: String
    Default: 1
  EcsTaskDefinition:
    Description: EcsTaskDefinition
    Type: String
Conditions:
  CreateElbIsTrue: !Equals [ !Ref CreateElb, true ]
  ElbTargetGroupIsBlank: !Equals [ !Ref ElbTargetGroup, '' ]
  CreateTargetGroupIsTrue: !And
  - !Condition CreateElbIsTrue
  - !Condition ElbTargetGroupIsBlank
  ElbSecurityGroupsIsBlank: !Equals [ !Ref ElbSecurityGroups, '' ]
  EcsSecurityGroupsIsBlank: !Equals [ !Ref EcsSecurityGroups, '' ]
Resources:
  Elb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: CreateElbIsTrue
    Properties:
<% if settings["static_name"] -%>
      Name: <%= @service %>
<% end -%>
      Scheme: internet-facing # or internal
      Subnets: !Ref Subnets
      # Add additional extra security groups if param
      SecurityGroups: !Split
        - ','
        - !If
          - ElbSecurityGroupsIsBlank
          - !Ref ElbSecurityGroup
          - !Join [',', [!Ref ElbSecurityGroups, !Ref ElbSecurityGroup]]
      Tags:
      - Key: Name
        Value: <%= @stack_name %>
      - Key: ufo
        Value: <%= @stack_name %>
<%= custom_properties(:Elb) %>
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: CreateTargetGroupIsTrue
    DependsOn:
      - Elb
    Properties:
      HealthCheckIntervalSeconds: 60
      UnhealthyThresholdCount: 10
      HealthCheckPath: /
<% if settings["static_name"] -%>
      Name: <%= @service %>
<% end -%>
      Port: <%= network[:target_group][:port] %>
      Protocol: <%= network[:target_group][:protocol].upcase %>
      VpcId: !Ref Vpc
<% if @container_info[:fargate] -%>
      TargetType: ip
<% end -%>
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 0
<%= custom_properties(:TargetGroup) %>
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: CreateElbIsTrue
    Properties:
<% if network[:elb][:certificate] -%>
      Certificates:
        - CertificateArn: <%= network[:elb][:certificate] %>
<% end -%>
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          !If [ElbTargetGroupIsBlank, !Ref TargetGroup, !Ref ElbTargetGroup]
      LoadBalancerArn: !Ref Elb
      Port: <%= network[:elb][:port] %>
      Protocol: <%= network[:elb][:protocol].upcase %>
<%= custom_properties(:Listener) %>

  ElbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateElbIsTrue
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '<%= network[:elb][:port] %>'
        ToPort: '<%= network[:elb][:port] %>'
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: <%= @stack_name %>-elb
      - Key: ufo
        Value: <%= @stack_name %>-elb
<%= custom_properties(:ElbSecurityGroup) %>

  # Allow all traffic from ELB SG to ECS SG
  Ecs:
    Type: "AWS::ECS::Service"
<% if @options[:elb] == "auto" -%>
    DependsOn:
      - Listener
<% end -%>
    Properties:
      Cluster: "development"
      DesiredCount: !Ref EcsDesiredCount
      TaskDefinition: !Ref EcsTaskDefinition
<% if settings["static_name"] -%>
      ServiceName: <%= @service %>
<% end -%>
<% if @container_info[:fargate] -%>
      LaunchType: FARGATE
<% end -%>
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Ref Subnets # required

          # SecurityGroups: [!Ref EcsSecurityGroup]
          SecurityGroups: !Split
            - ','
            - !If
              - EcsSecurityGroupsIsBlank
              - !Ref EcsSecurityGroup
              - !Join [',', [!Ref EcsSecurityGroups, !Ref EcsSecurityGroup]]

          AssignPublicIp: ENABLED # accepts ENABLED, DISABLED
      LoadBalancers: !If
      - CreateTargetGroupIsTrue
      - - ContainerName: <%= @container_info[:name] %>
          ContainerPort: <%= @container_info[:port] %>
          TargetGroupArn: !Ref TargetGroup
      - !If
        - ElbTargetGroupIsBlank
        - []
        - - ContainerName: <%= @container_info[:name] %>
            ContainerPort: <%= @container_info[:port] %>
            TargetGroupArn: !Ref ElbTargetGroup
<%= custom_properties(:Ecs) %>
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref Vpc
      # Outbound access: instance needs access to internet to pull down image
      # or else get CannotPullContainerError
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: <%= @stack_name %>-<%= (rand.round(2) * 100).to_i.to_s %>
      - Key: ufo
        Value: <%= @stack_name %>
<%= custom_properties(:EcsSecurityGroup) %>
  EcsCrossSecurityGroupRule:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: CreateElbIsTrue
    Properties:
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId: !GetAtt ElbSecurityGroup.GroupId
      GroupId: !GetAtt EcsSecurityGroup.GroupId
<%= custom_properties(:EcsCrossSecurityGroupRule) %>

Outputs:
 Dns:
    Description: Elb Dns
    Condition: CreateElbIsTrue
    Value: !GetAtt Elb.DNSName
